%%change	START
	LAD	gr0,0
	CALL	L0001
	CALL	FLUSH
	RET
; program change;
; var
$count	DC	0
$n	DC	0
; n , count : integer;
L0001
; begin
	LAD	gr1,	L0002
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( 'please input change' );
	LAD	gr1,	$n
	CALL	READINT
	CALL	READLINE
; readln ( n );
	LAD	gr1,	0
	ST	gr1,	$count
; count := 0;
L0003
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JPL	L0005
	LAD	gr1,0
	JUMP	L0006
L0005
	LAD	gr1,1
L0006
	CPA	gr1,gr0
	JZE	L0004
; while n > 0 do
; begin
L0007
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	10
	POP	gr2
	CPA	gr2,gr1
	JPL	L0009
	JZE	L0009
	LAD	gr1,0
	JUMP	L0010
L0009
	LAD	gr1,1
L0010
	CPA	gr1,gr0
	JZE	L0008
; while n >= 10 do
; begin
L0011
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	100
	POP	gr2
	CPA	gr2,gr1
	JPL	L0013
	JZE	L0013
	LAD	gr1,0
	JUMP	L0014
L0013
	LAD	gr1,1
L0014
	CPA	gr1,gr0
	JZE	L0012
; while n >= 100 do
; begin
L0015
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	1000
	POP	gr2
	CPA	gr2,gr1
	JPL	L0017
	JZE	L0017
	LAD	gr1,0
	JUMP	L0018
L0017
	LAD	gr1,1
L0018
	CPA	gr1,gr0
	JZE	L0016
; while n >= 1000 do
; begin
L0019
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	10000
	POP	gr2
	CPA	gr2,gr1
	JPL	L0021
	JZE	L0021
	LAD	gr1,0
	JUMP	L0022
L0021
	LAD	gr1,1
L0022
	CPA	gr1,gr0
	JZE	L0020
; while n >= 10000 do
; begin
	LD	gr1,	$count
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	ADDA	gr1,gr2
	JOV	EOVF
	ST	gr1,	$count
; count := count + 1;
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	10000
	POP	gr2
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	ST	gr1,	$n
; n := n - 10000;
	JUMP	L0019
L0020
; end;
	LD	gr1,	$count
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JPL	L0025
	LAD	gr1,0
	JUMP	L0026
L0025
	LAD	gr1,1
L0026
	CPA	gr1,gr0
	JZE	L0023
; if count > 0 then
	LAD	gr1,	L0027
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$count
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
L0023
; writeln ( '10000 yen : ' , count );
	LAD	gr1,	0
	ST	gr1,	$count
; count := 0;
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	1000
	POP	gr2
	CPA	gr2,gr1
	JMI	L0030
	LAD	gr1,0
	JUMP	L0031
L0030
	LAD	gr1,1
L0031
	CPA	gr1,gr0
	JZE	L0028
; if n < 1000 then
	JUMP	L0016
L0028
; break;
	LD	gr1,	$count
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	ADDA	gr1,gr2
	JOV	EOVF
	ST	gr1,	$count
; count := count + 1;
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	1000
	POP	gr2
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	ST	gr1,	$n
; n := n - 1000;
	JUMP	L0015
L0016
; end;
	LD	gr1,	$count
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JPL	L0034
	LAD	gr1,0
	JUMP	L0035
L0034
	LAD	gr1,1
L0035
	CPA	gr1,gr0
	JZE	L0032
; if count > 0 then
	LAD	gr1,	L0036
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$count
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
L0032
; writeln ( ' 1000 yen : ' , count );
	LAD	gr1,	0
	ST	gr1,	$count
; count := 0;
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	100
	POP	gr2
	CPA	gr2,gr1
	JMI	L0039
	LAD	gr1,0
	JUMP	L0040
L0039
	LAD	gr1,1
L0040
	CPA	gr1,gr0
	JZE	L0037
; if n < 100 then
	JUMP	L0012
L0037
; break;
	LD	gr1,	$count
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	ADDA	gr1,gr2
	JOV	EOVF
	ST	gr1,	$count
; count := count + 1;
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	100
	POP	gr2
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	ST	gr1,	$n
; n := n - 100;
	JUMP	L0011
L0012
; end;
	LD	gr1,	$count
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JPL	L0043
	LAD	gr1,0
	JUMP	L0044
L0043
	LAD	gr1,1
L0044
	CPA	gr1,gr0
	JZE	L0041
; if count > 0 then
	LAD	gr1,	L0045
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$count
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
L0041
; writeln ( '  100 yen : ' , count );
	LAD	gr1,	0
	ST	gr1,	$count
; count := 0;
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	10
	POP	gr2
	CPA	gr2,gr1
	JMI	L0048
	LAD	gr1,0
	JUMP	L0049
L0048
	LAD	gr1,1
L0049
	CPA	gr1,gr0
	JZE	L0046
; if n < 10 then
	JUMP	L0008
L0046
; break;
	LD	gr1,	$count
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	ADDA	gr1,gr2
	JOV	EOVF
	ST	gr1,	$count
; count := count + 1;
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	10
	POP	gr2
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	ST	gr1,	$n
; n := n - 10;
	JUMP	L0007
L0008
; end;
	LD	gr1,	$count
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JPL	L0052
	LAD	gr1,0
	JUMP	L0053
L0052
	LAD	gr1,1
L0053
	CPA	gr1,gr0
	JZE	L0050
; if count > 0 then
	LAD	gr1,	L0054
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$count
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
L0050
; writeln ( '   10 yen : ' , count );
	LAD	gr1,	0
	ST	gr1,	$count
; count := 0;
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	CPA	gr2,gr1
	JMI	L0057
	LAD	gr1,0
	JUMP	L0058
L0057
	LAD	gr1,1
L0058
	CPA	gr1,gr0
	JZE	L0055
; if n < 1 then
	JUMP	L0004
L0055
; break;
	LD	gr1,	$count
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	ADDA	gr1,gr2
	JOV	EOVF
	ST	gr1,	$count
; count := count + 1;
	LD	gr1,	$n
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	ST	gr1,	$n
; n := n - 1;
	JUMP	L0003
L0004
; end;
	LD	gr1,	$count
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JPL	L0061
	LAD	gr1,0
	JUMP	L0062
L0061
	LAD	gr1,1
L0062
	CPA	gr1,gr0
	JZE	L0059
; if count > 0 then
	LAD	gr1,	L0063
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$count
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
L0059
; writeln ( '    1 yen : ' , count );
	RET
L0002	DC	'please input change'
L0027	DC	'10000 yen : '
L0036	DC	' 1000 yen : '
L0045	DC	'  100 yen : '
L0054	DC	'   10 yen : '
L0063	DC	'    1 yen : '
; ------------------------
; Utility functions
; ------------------------
EOVF	CALL	WRITELINE
	LAD	gr1,EOVF1
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
	SVC	1	;  overflow error stop
EOVF1	DC	'***** Run-Time Error : Overflow *****'
E0DIV	JNZ	EOVF
	CALL	WRITELINE
	LAD	gr1,E0DIV1
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
	SVC	2 	;  0-divide error stop
E0DIV1	DC	'***** Run-Time Error : Zero-Divide *****'
EROV	CALL	WRITELINE
	LAD	gr1,EROV1
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
	SVC	3	;  range-over error stop
EROV1	DC	'***** Run-Time Error : Range-Over in Array Index *****'
; gr1の値（文字）をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITECHAR
	RPUSH
	LD	gr6,SPACE
	LD	gr7,	OBUFSIZE
WC1	SUBA	gr2,ONE		; while(--c > 0) {
	JZE	WC2
	JMI	WC2
	ST	gr6,OBUF,gr7	;  *p++ = ' ';
	CALL	BOVFCHECK
	JUMP	WC1 		; }
WC2	ST	gr1,OBUF,gr7	; *p++ = gr1;
	CALL	BOVFCHECK
	ST	gr7, OBUFSIZE
	RPOP
	RET
; gr1が指す文字列をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITESTR
	RPUSH
	LD	gr6,gr1		; p = gr1;
WS1	LD	gr4,0,gr6	; while(*p != 0) {
	JZE	WS2
	ADDA	gr6,ONE		;  p++;
	SUBA	gr2,ONE		;  c--;
	JUMP	WS1		; }
WS2	LD	gr7,OBUFSIZE	; q = OBUFSIZE;
	LD	gr5,SPACE
WS3	SUBA	gr2,ONE		; while(--c >= 0) {
	JMI	WS4
	ST	gr5,OBUF,gr7	;  *q++ = ' ';
	CALL	BOVFCHECK
	JUMP	WS3		; }
WS4	LD	gr4,0,gr1	; while(*gr1 != 0) {
	JZE	WS5
	ST	gr4,OBUF,gr7	;  *q++ = *gr1++;
	ADDA	gr1,ONE
	CALL	BOVFCHECK
	JUMP	WS4		; }
WS5	ST	gr7,OBUFSIZE	; OBUFSIZE = q;
	RPOP
	RET
BOVFCHECK
	ADDA	gr7,ONE
	CPA	gr7, BOVFLEVEL
	JMI	BOVF1
	CALL	WRITELINE
	LD	gr7,OBUFSIZE
BOVF1	RET
BOVFLEVEL
	DC	256
; gr1の値（整数）をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITEINT
	RPUSH
	LD	gr7,gr0  	; flag = 0;
	CPA	gr1,gr0 	; if(gr1>=0) goto WI1;
	JPL	WI1
	JZE	WI1
	LD	gr4,gr0  	; gr1= - gr1;
	SUBA	gr4,gr1
	CPA	gr4,gr1
	JZE	WI6
	LD	gr1,gr4
	LD	gr7,ONE  	; flag = 1;
WI1	LD	gr6,SIX  	; p = INTBUF+6;
	ST	gr0,INTBUF,gr6	; *p = 0;
	SUBA	gr6,ONE  	; p--;
	CPA	gr1,gr0  	; if(gr1 == 0)
	JNZ	WI2
	LD	gr4,ZERO 	;  *p = '0';
	ST	gr4,INTBUF,gr6
	JUMP	WI5 		; }
				; else {
WI2	CPA	gr1,gr0 	;  while(gr1 != 0) {
	JZE	WI3
	LD	gr5,gr1 	;   gr5 = gr1 - (gr1 / 10) * 10;
	DIVA	gr1,TEN 	;   gr1 /= 10;
	LD	gr4,gr1
	MULA	gr4,TEN
	SUBA	gr5,gr4
	ADDA	gr5,ZERO 	;   gr5 += '0';
	ST	gr5,INTBUF,gr6 	;   *p = gr5;
	SUBA	gr6,ONE 	;   p--;
	JUMP	WI2 		;  }
WI3	CPA	gr7,gr0 	;  if(flag != 0) {
	JZE	WI4
	LD	gr4,MINUS 	;   *p = '-';
	ST	gr4,INTBUF,gr6
	JUMP	WI5 		;  }
WI4	ADDA	gr6,ONE 	;  else p++;
				; }
WI5	LAD	gr1,INTBUF,gr6 	; gr1 = p;
	CALL	WRITESTR 	; WRITESTR();
	RPOP
	RET
WI6	LAD	gr1,MMINT
	CALL	WRITESTR 	; WRITESTR();
	RPOP
	RET
MMINT	DC	'-32768'
; gr1の値（真理値）が0なら'FALSE'を
; 0以外なら'TRUE'をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITEBOOL
	RPUSH
	CPA	gr1,gr0 	; if(gr1 != 0)
	JZE	WB1
	LAD	gr1,WBTRUE 	;  gr1 = TRUE;
	JUMP	WB2
				; else
WB1	LAD	gr1,WBFALSE 	;  gr1 = FALSE;
WB2	CALL	WRITESTR 	; WRITESTR();
	RPOP
	RET
WBTRUE	DC	'TRUE'
WBFALSE	DC	'FALSE'
; 改行を出力する
WRITELINE
	RPUSH
	LD	gr7,OBUFSIZE
	LD	gr6,NEWLINE
	ST	gr6,OBUF,gr7
	ADDA	gr7,ONE
	ST	gr7,OBUFSIZE
	OUT	OBUF,OBUFSIZE
	ST	gr0,OBUFSIZE
	RPOP
	RET
FLUSH	RPUSH
	LD	gr7,OBUFSIZE
	JZE	FL1
	CALL	WRITELINE
FL1	RPOP
	RET
; gr1が指す番地に文字一つを読み込む
READCHAR
	RPUSH
	LD	gr5,RPBBUF 	; if(RPBBUF != 0) {
	JZE	RC0
	ST	gr5,0,gr1 	;  *gr1 = RPBBUF;
	ST	gr0,RPBBUF 	;  RPBBUF = 0
	JUMP	RC3 		;  return; }
RC0	LD	gr7,INP 	; inp = INP;
	LD	gr6,IBUFSIZE 	; if(IBUFSIZE == 0) {
	JNZ	RC1
	IN	IBUF,IBUFSIZE 	;  IN();
	LD	gr7,gr0 	;  inp = 0;
				; }
RC1	CPA	gr7,IBUFSIZE 	; if(inp == IBUFSIZE) {
	JNZ	RC2
	LD	gr5,NEWLINE 	;  *gr1 = '\n';
	ST	gr5,0,gr1
	ST	gr0,IBUFSIZE 	;  IBUFSIZE = INP = 0;
	ST	gr0,INP
	JUMP	RC3 		; }
				; else {
RC2	LD	gr5,IBUF,gr7 	;  *gr1 = *inp++;
	ADDA	gr7,ONE
	ST	gr5,0,gr1
	ST	gr7,INP 	;  INP = inp;
				; }
RC3	RPOP
	RET
; gr1が指す番地に整数値一つを読み込む
READINT	RPUSH
				; do {
RI1	CALL	READCHAR 	;  ch = READCHAR();
	LD	gr7,0,gr1
	CPA	gr7,SPACE 	; } while(ch==' ' || ch=='\t' || ch=='\n');
	JZE	RI1
	CPA	gr7,TAB
	JZE	RI1
	CPA	gr7,NEWLINE
	JZE	RI1
	LD 	gr5,ONE 	; flag = 1
	CPA	gr7,MINUS 	; if(ch == '-') {
	JNZ	RI4
	LD	gr5,gr0 	;  flag = 0;
	CALL	READCHAR 	;  ch = READCHAR();
	LD	gr7,0,gr1	; }
RI4	LD	gr6,gr0 	; v = 0;
RI2	CPA	gr7,ZERO 	; while('0' <= ch && ch <= '9') {
	JMI	RI3
	CPA	gr7,NINE
	JPL	RI3
	MULA	gr6,TEN 	;  v = v*10+ch-'0';
	ADDA	gr6,gr7
	SUBA	gr6,ZERO
	CALL	READCHAR 	;  ch = READSCHAR();
	LD	gr7,0,gr1
	JUMP	RI2 		; }
RI3	ST	gr7,RPBBUF 	; ReadPushBack();
	ST	gr6,0,gr1 	; *gr1 = v;
	CPA	gr5,gr0 	; if(flag == 0) {
	JNZ	RI5
	SUBA	gr5,gr6 	;  *gr1 = -v;
	ST	gr5,0,gr1
				; }
RI5	RPOP
	RET
; 入力を改行コードまで（改行コードも含む）読み飛ばす
READLINE
	ST	gr0,IBUFSIZE
	ST	gr0,INP
	ST	gr0,RPBBUF
	RET
ONE	DC 	1
SIX	DC 	6
TEN	DC 	10
SPACE	DC 	#0020 	; ' '
MINUS	DC 	#002D 	; '-'
TAB	DC	#0009 	; '\t'
ZERO	DC	#0030 	; '0'
NINE	DC	#0039 	; '9'
NEWLINE	DC 	#000A 	; '\n'
INTBUF	DS 	8
OBUFSIZE
	DC	0
IBUFSIZE
	DC	0
INP	DC	0
OBUF	DS	257
IBUF	DS	257
RPBBUF	DC	0
	END
