%%sample19	START
	LAD	gr0,0
	CALL	L0001
	CALL	FLUSH
	RET
; program sample19;
$$lc%gcmlcm
	DC	0
$$gc%gcmlcm
	DC	0
$$n%gcmlcm
	DC	0
$$m%gcmlcm
	DC	0
; procedure gcmlcm ( m , n , gc , lc : integer );
; var
$r%gcmlcm
	DC	0
$b%gcmlcm
	DC	0
$a%gcmlcm
	DC	0
; a , b , r : integer;
$gcmlcm
	POP	gr2
	POP	gr1
	ST	gr1,	$$lc%gcmlcm
	POP	gr1
	ST	gr1,	$$gc%gcmlcm
	POP	gr1
	ST	gr1,	$$n%gcmlcm
	POP	gr1
	ST	gr1,	$$m%gcmlcm
	PUSH	0,gr2
; begin
	LD	gr1,	$$m%gcmlcm
	LD	gr1,0,gr1
	ST	gr1,	$a%gcmlcm
; a := m;
	LD	gr1,	$$n%gcmlcm
	LD	gr1,0,gr1
	ST	gr1,	$b%gcmlcm
; b := n;
L0002
	LD	gr1,	$b%gcmlcm
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JNZ	L0004
	LAD	gr1,0
	JUMP	L0005
L0004
	LAD	gr1,1
L0005
	CPA	gr1,gr0
	JZE	L0003
; while b <> 0 do
; begin
	LD	gr1,	$a%gcmlcm
	PUSH	0,gr1
	LD	gr1,	$a%gcmlcm
	PUSH	0,gr1
	LD	gr1,	$b%gcmlcm
	POP	gr2
	DIVA	gr2,gr1
	JOV	E0DIV
	LD	gr1,gr2
	PUSH	0,gr1
	LD	gr1,	$b%gcmlcm
	POP	gr2
	MULA	gr1,gr2
	JOV	EOVF
	POP	gr2
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	ST	gr1,	$r%gcmlcm
; r := a - ( a div b ) * b;
	LD	gr1,	$b%gcmlcm
	ST	gr1,	$a%gcmlcm
; a := b;
	LD	gr1,	$r%gcmlcm
	ST	gr1,	$b%gcmlcm
; b := r
	JUMP	L0002
L0003
; end;
	LD	gr1,	$$gc%gcmlcm
	PUSH	0,gr1
	LD	gr1,	$a%gcmlcm
	POP	gr2
	ST	gr1,0,gr2
; gc := a;
	LD	gr1,	$$lc%gcmlcm
	PUSH	0,gr1
	LD	gr1,	$$m%gcmlcm
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$$gc%gcmlcm
	LD	gr1,0,gr1
	POP	gr2
	DIVA	gr2,gr1
	JOV	E0DIV
	LD	gr1,gr2
	PUSH	0,gr1
	LD	gr1,	$$n%gcmlcm
	LD	gr1,0,gr1
	POP	gr2
	MULA	gr1,gr2
	JOV	EOVF
	POP	gr2
	ST	gr1,0,gr2
; lc := ( m div gc ) * n
	RET
; end;
$$b%abs	DC	0
$$a%abs	DC	0
; procedure abs ( a , b : integer );
$abs
	POP	gr2
	POP	gr1
	ST	gr1,	$$b%abs
	POP	gr1
	ST	gr1,	$$a%abs
	PUSH	0,gr2
; begin
	LD	gr1,	$$a%abs
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JMI	L0008
	LAD	gr1,0
	JUMP	L0009
L0008
	LAD	gr1,1
L0009
	CPA	gr1,gr0
	JZE	L0006
; if a < 0 then
	LD	gr1,	$$b%abs
	PUSH	0,gr1
	LD	gr1,	$$a%abs
	LD	gr1,0,gr1
	LD	gr2,gr0
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	POP	gr2
	ST	gr1,0,gr2
; b := - a
; else
	JUMP	L0007
L0006
	LD	gr1,	$$b%abs
	PUSH	0,gr1
	LD	gr1,	$$a%abs
	LD	gr1,0,gr1
	POP	gr2
	ST	gr1,0,gr2
L0007
; b := a
	RET
; end;
$$gc%gcm
	DC	0
$$b%gcm	DC	0
$$a%gcm	DC	0
; procedure gcm ( a , b , gc : integer );
; var
$bb%gcm	DC	0
$aa%gcm	DC	0
$lc%gcm	DC	0
; lc , aa , bb : integer;
$gcm
	POP	gr2
	POP	gr1
	ST	gr1,	$$gc%gcm
	POP	gr1
	ST	gr1,	$$b%gcm
	POP	gr1
	ST	gr1,	$$a%gcm
	PUSH	0,gr2
; begin
	LD	gr1,	$$a%gcm
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JZE	L0012
	LAD	gr1,0
	JUMP	L0013
L0012
	LAD	gr1,1
L0013
	PUSH	0,gr1
	LD	gr1,	$$b%gcm
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JZE	L0014
	LAD	gr1,0
	JUMP	L0015
L0014
	LAD	gr1,1
L0015
	POP	gr2
	OR	gr1,gr2
	CPA	gr1,gr0
	JZE	L0010
; if ( a = 0 ) or ( b = 0 ) then
	LD	gr1,	$$gc%gcm
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	ST	gr1,0,gr2
; gc := 1
	JUMP	L0011
L0010
; else
; begin
	LD	gr1,	$$a%gcm
	PUSH	0,gr1
	LAD	gr1,	$aa%gcm
	PUSH	0,gr1
	CALL	$abs
; call abs ( a , aa );
	LD	gr1,	$$b%gcm
	PUSH	0,gr1
	LAD	gr1,	$bb%gcm
	PUSH	0,gr1
	CALL	$abs
; call abs ( b , bb );
	LAD	gr1,	$aa%gcm
	PUSH	0,gr1
	LAD	gr1,	$bb%gcm
	PUSH	0,gr1
	LD	gr1,	$$gc%gcm
	PUSH	0,gr1
	LAD	gr1,	$lc%gcm
	PUSH	0,gr1
	CALL	$gcmlcm
; call gcmlcm ( aa , bb , gc , lc )
L0011
; end
	RET
; end;
$$lc%lcm
	DC	0
$$b%lcm	DC	0
$$a%lcm	DC	0
; procedure lcm ( a , b , lc : integer );
; var
$bb%lcm	DC	0
$aa%lcm	DC	0
$gc%lcm	DC	0
; gc , aa , bb : integer;
$lcm
	POP	gr2
	POP	gr1
	ST	gr1,	$$lc%lcm
	POP	gr1
	ST	gr1,	$$b%lcm
	POP	gr1
	ST	gr1,	$$a%lcm
	PUSH	0,gr2
; begin
	LD	gr1,	$$a%lcm
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JZE	L0018
	LAD	gr1,0
	JUMP	L0019
L0018
	LAD	gr1,1
L0019
	PUSH	0,gr1
	LD	gr1,	$$b%lcm
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JZE	L0020
	LAD	gr1,0
	JUMP	L0021
L0020
	LAD	gr1,1
L0021
	POP	gr2
	OR	gr1,gr2
	CPA	gr1,gr0
	JZE	L0016
; if ( a = 0 ) or ( b = 0 ) then
	LD	gr1,	$$lc%lcm
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	ST	gr1,0,gr2
; lc := 1
	JUMP	L0017
L0016
; else
; begin
	LD	gr1,	$$a%lcm
	PUSH	0,gr1
	LAD	gr1,	$aa%lcm
	PUSH	0,gr1
	CALL	$abs
; call abs ( a , aa );
	LD	gr1,	$$b%lcm
	PUSH	0,gr1
	LAD	gr1,	$bb%lcm
	PUSH	0,gr1
	CALL	$abs
; call abs ( b , bb );
	LAD	gr1,	$aa%lcm
	PUSH	0,gr1
	LAD	gr1,	$bb%lcm
	PUSH	0,gr1
	LAD	gr1,	$gc%lcm
	PUSH	0,gr1
	LD	gr1,	$$lc%lcm
	PUSH	0,gr1
	CALL	$gcmlcm
; call gcmlcm ( aa , bb , gc , lc )
L0017
; end
	RET
; end;
$$a2%reduce
	DC	0
$$a1%reduce
	DC	0
; procedure reduce ( a1 , a2 : integer );
; var
$gc%reduce
	DC	0
; gc : integer;
$reduce
	POP	gr2
	POP	gr1
	ST	gr1,	$$a2%reduce
	POP	gr1
	ST	gr1,	$$a1%reduce
	PUSH	0,gr2
; begin
	LD	gr1,	$$a1%reduce
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JZE	L0024
	LAD	gr1,0
	JUMP	L0025
L0024
	LAD	gr1,1
L0025
	CPA	gr1,gr0
	JZE	L0022
; if a1 = 0 then
; begin
	LD	gr1,	$$a2%reduce
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	ST	gr1,0,gr2
; a2 := 1;
	RET
; return
L0022
; end;
	LD	gr1,	$$a2%reduce
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JZE	L0028
	LAD	gr1,0
	JUMP	L0029
L0028
	LAD	gr1,1
L0029
	CPA	gr1,gr0
	JZE	L0026
; if a2 = 0 then
; begin
	LD	gr1,	$$a1%reduce
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	ST	gr1,0,gr2
; a1 := 1;
	RET
; return
L0026
; end;
	LD	gr1,	$$a2%reduce
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JMI	L0032
	LAD	gr1,0
	JUMP	L0033
L0032
	LAD	gr1,1
L0033
	CPA	gr1,gr0
	JZE	L0030
; if a2 < 0 then
; begin
	LD	gr1,	$$a2%reduce
	PUSH	0,gr1
	LD	gr1,	$$a2%reduce
	LD	gr1,0,gr1
	LD	gr2,gr0
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	POP	gr2
	ST	gr1,0,gr2
; a2 := - a2;
	LD	gr1,	$$a1%reduce
	PUSH	0,gr1
	LD	gr1,	$$a1%reduce
	LD	gr1,0,gr1
	LD	gr2,gr0
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	POP	gr2
	ST	gr1,0,gr2
; a1 := - a1
L0030
; end;
	LD	gr1,	$$a1%reduce
	PUSH	0,gr1
	LD	gr1,	$$a2%reduce
	PUSH	0,gr1
	LAD	gr1,	$gc%reduce
	PUSH	0,gr1
	CALL	$gcm
; call gcm ( a1 , a2 , gc );
	LD	gr1,	$$a1%reduce
	PUSH	0,gr1
	LD	gr1,	$$a1%reduce
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$gc%reduce
	POP	gr2
	DIVA	gr2,gr1
	JOV	E0DIV
	LD	gr1,gr2
	POP	gr2
	ST	gr1,0,gr2
; a1 := a1 div gc;
	LD	gr1,	$$a2%reduce
	PUSH	0,gr1
	LD	gr1,	$$a2%reduce
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$gc%reduce
	POP	gr2
	DIVA	gr2,gr1
	JOV	E0DIV
	LD	gr1,gr2
	POP	gr2
	ST	gr1,0,gr2
; a2 := a2 div gc
	RET
; end;
$$y2%sum
	DC	0
$$y1%sum
	DC	0
$$x2%sum
	DC	0
$$x1%sum
	DC	0
; procedure sum ( x1 , x2 , y1 , y2 : integer );
; var
$y11%sum
	DC	0
$lc%sum	DC	0
; lc , y11 : integer;
$sum
	POP	gr2
	POP	gr1
	ST	gr1,	$$y2%sum
	POP	gr1
	ST	gr1,	$$y1%sum
	POP	gr1
	ST	gr1,	$$x2%sum
	POP	gr1
	ST	gr1,	$$x1%sum
	PUSH	0,gr2
; begin
	LD	gr1,	$$x2%sum
	PUSH	0,gr1
	LD	gr1,	$$y2%sum
	PUSH	0,gr1
	LAD	gr1,	$lc%sum
	PUSH	0,gr1
	CALL	$lcm
; call lcm ( x2 , y2 , lc );
	LD	gr1,	$$x1%sum
	PUSH	0,gr1
	LD	gr1,	$$x1%sum
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$lc%sum
	PUSH	0,gr1
	LD	gr1,	$$x2%sum
	LD	gr1,0,gr1
	POP	gr2
	DIVA	gr2,gr1
	JOV	E0DIV
	LD	gr1,gr2
	POP	gr2
	MULA	gr1,gr2
	JOV	EOVF
	POP	gr2
	ST	gr1,0,gr2
; x1 := x1 * ( lc div x2 );
	LD	gr1,	$$y1%sum
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$lc%sum
	PUSH	0,gr1
	LD	gr1,	$$y2%sum
	LD	gr1,0,gr1
	POP	gr2
	DIVA	gr2,gr1
	JOV	E0DIV
	LD	gr1,gr2
	POP	gr2
	MULA	gr1,gr2
	JOV	EOVF
	ST	gr1,	$y11%sum
; y11 := y1 * ( lc div y2 );
	LD	gr1,	$$x1%sum
	PUSH	0,gr1
	LD	gr1,	$$x1%sum
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$y11%sum
	POP	gr2
	ADDA	gr1,gr2
	JOV	EOVF
	POP	gr2
	ST	gr1,0,gr2
; x1 := x1 + y11;
	LD	gr1,	$$x2%sum
	PUSH	0,gr1
	LD	gr1,	$lc%sum
	POP	gr2
	ST	gr1,0,gr2
; x2 := lc;
	LD	gr1,	$$x1%sum
	PUSH	0,gr1
	LD	gr1,	$$x2%sum
	PUSH	0,gr1
	CALL	$reduce
; call reduce ( x1 , x2 )
	RET
; end;
$$y2%sub
	DC	0
$$y1%sub
	DC	0
$$x2%sub
	DC	0
$$x1%sub
	DC	0
; procedure sub ( x1 , x2 , y1 , y2 : integer );
; var
$y11%sub
	DC	0
$lc%sub	DC	0
; lc , y11 : integer;
$sub
	POP	gr2
	POP	gr1
	ST	gr1,	$$y2%sub
	POP	gr1
	ST	gr1,	$$y1%sub
	POP	gr1
	ST	gr1,	$$x2%sub
	POP	gr1
	ST	gr1,	$$x1%sub
	PUSH	0,gr2
; begin
	LD	gr1,	$$x1%sub
	PUSH	0,gr1
	LD	gr1,	$$x2%sub
	PUSH	0,gr1
	LD	gr1,	$$y1%sub
	LD	gr1,0,gr1
	LD	gr2,gr0
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	LAD	gr2,	L0034
	ST	gr1, 0,gr2
	PUSH	0,gr2
	LD	gr1,	$$y2%sub
	PUSH	0,gr1
	CALL	$sum
; call sum ( x1 , x2 , - y1 , y2 )
	RET
; end;
$$y2%mult
	DC	0
$$y1%mult
	DC	0
$$x2%mult
	DC	0
$$x1%mult
	DC	0
; procedure mult ( x1 , x2 , y1 , y2 : integer );
; var
$y22%mult
	DC	0
$y11%mult
	DC	0
$gc%mult
	DC	0
; gc , y11 , y22 : integer;
$mult
	POP	gr2
	POP	gr1
	ST	gr1,	$$y2%mult
	POP	gr1
	ST	gr1,	$$y1%mult
	POP	gr1
	ST	gr1,	$$x2%mult
	POP	gr1
	ST	gr1,	$$x1%mult
	PUSH	0,gr2
; begin
	LD	gr1,	$$x1%mult
	PUSH	0,gr1
	LD	gr1,	$$y2%mult
	PUSH	0,gr1
	LAD	gr1,	$gc%mult
	PUSH	0,gr1
	CALL	$gcm
; call gcm ( x1 , y2 , gc );
	LD	gr1,	$$x1%mult
	PUSH	0,gr1
	LD	gr1,	$$x1%mult
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$gc%mult
	POP	gr2
	DIVA	gr2,gr1
	JOV	E0DIV
	LD	gr1,gr2
	POP	gr2
	ST	gr1,0,gr2
; x1 := x1 div gc;
	LD	gr1,	$$y2%mult
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$gc%mult
	POP	gr2
	DIVA	gr2,gr1
	JOV	E0DIV
	LD	gr1,gr2
	ST	gr1,	$y22%mult
; y22 := y2 div gc;
	LD	gr1,	$$x2%mult
	PUSH	0,gr1
	LD	gr1,	$$y1%mult
	PUSH	0,gr1
	LAD	gr1,	$gc%mult
	PUSH	0,gr1
	CALL	$gcm
; call gcm ( x2 , y1 , gc );
	LD	gr1,	$$x2%mult
	PUSH	0,gr1
	LD	gr1,	$$x2%mult
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$gc%mult
	POP	gr2
	DIVA	gr2,gr1
	JOV	E0DIV
	LD	gr1,gr2
	POP	gr2
	ST	gr1,0,gr2
; x2 := x2 div gc;
	LD	gr1,	$$y1%mult
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$gc%mult
	POP	gr2
	DIVA	gr2,gr1
	JOV	E0DIV
	LD	gr1,gr2
	ST	gr1,	$y11%mult
; y11 := y1 div gc;
	LD	gr1,	$$x1%mult
	PUSH	0,gr1
	LD	gr1,	$$x1%mult
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$y11%mult
	POP	gr2
	MULA	gr1,gr2
	JOV	EOVF
	POP	gr2
	ST	gr1,0,gr2
; x1 := x1 * y11;
	LD	gr1,	$$x2%mult
	PUSH	0,gr1
	LD	gr1,	$$x2%mult
	LD	gr1,0,gr1
	PUSH	0,gr1
	LD	gr1,	$y22%mult
	POP	gr2
	MULA	gr1,gr2
	JOV	EOVF
	POP	gr2
	ST	gr1,0,gr2
; x2 := x2 * y22;
	LD	gr1,	$$x1%mult
	PUSH	0,gr1
	LD	gr1,	$$x2%mult
	PUSH	0,gr1
	CALL	$reduce
; call reduce ( x1 , x2 )
	RET
; end;
$$y2%divide
	DC	0
$$y1%divide
	DC	0
$$x2%divide
	DC	0
$$x1%divide
	DC	0
; procedure divide ( x1 , x2 , y1 , y2 : integer );
$divide
	POP	gr2
	POP	gr1
	ST	gr1,	$$y2%divide
	POP	gr1
	ST	gr1,	$$y1%divide
	POP	gr1
	ST	gr1,	$$x2%divide
	POP	gr1
	ST	gr1,	$$x1%divide
	PUSH	0,gr2
; begin
	LD	gr1,	$$x1%divide
	PUSH	0,gr1
	LD	gr1,	$$x2%divide
	PUSH	0,gr1
	LD	gr1,	$$y2%divide
	PUSH	0,gr1
	LD	gr1,	$$y1%divide
	PUSH	0,gr1
	CALL	$mult
; call mult ( x1 , x2 , y2 , y1 )
	RET
; end;
$$b%printfinal
	DC	0
$$a%printfinal
	DC	0
; procedure printfinal ( a , b : integer );
$printfinal
	POP	gr2
	POP	gr1
	ST	gr1,	$$b%printfinal
	POP	gr1
	ST	gr1,	$$a%printfinal
	PUSH	0,gr2
; begin
	LD	gr1,	$$a%printfinal
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JZE	L0037
	LAD	gr1,0
	JUMP	L0038
L0037
	LAD	gr1,1
L0038
	CPA	gr1,gr0
	JZE	L0035
; if a = 0 then
	LAD	gr1,	L0039
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$$a%printfinal
	LD	gr1,0,gr1
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
; writeln ( 'Final Result =' , a )
	JUMP	L0036
L0035
	LD	gr1,	$$b%printfinal
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	CPA	gr2,gr1
	JZE	L0042
	LAD	gr1,0
	JUMP	L0043
L0042
	LAD	gr1,1
L0043
	CPA	gr1,gr0
	JZE	L0040
; else if b = 1 then
	LAD	gr1,	L0044
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$$a%printfinal
	LD	gr1,0,gr1
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
; writeln ( 'Final Result =' , a )
; else
	JUMP	L0041
L0040
	LAD	gr1,	L0045
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$$a%printfinal
	LD	gr1,0,gr1
	LD	gr2,gr0
	CALL	WRITEINT
	LAD	gr1,	47
	LD	gr2,gr0
	CALL	WRITECHAR
	LD	gr1,	$$b%printfinal
	LD	gr1,0,gr1
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
L0041
; writeln ( 'Final Result =' , a , '/' , b )
L0036
	RET
; end;
$$b%printtemp
	DC	0
$$a%printtemp
	DC	0
; procedure printtemp ( a , b : integer );
$printtemp
	POP	gr2
	POP	gr1
	ST	gr1,	$$b%printtemp
	POP	gr1
	ST	gr1,	$$a%printtemp
	PUSH	0,gr2
; begin
	LD	gr1,	$$a%printtemp
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JZE	L0048
	LAD	gr1,0
	JUMP	L0049
L0048
	LAD	gr1,1
L0049
	CPA	gr1,gr0
	JZE	L0046
; if a = 0 then
	LAD	gr1,	L0050
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$$a%printtemp
	LD	gr1,0,gr1
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
; writeln ( 'Temporary Result =' , a )
	JUMP	L0047
L0046
	LD	gr1,	$$b%printtemp
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	1
	POP	gr2
	CPA	gr2,gr1
	JZE	L0053
	LAD	gr1,0
	JUMP	L0054
L0053
	LAD	gr1,1
L0054
	CPA	gr1,gr0
	JZE	L0051
; else if b = 1 then
	LAD	gr1,	L0055
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$$a%printtemp
	LD	gr1,0,gr1
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
; writeln ( 'Temporary Result =' , a )
; else
	JUMP	L0052
L0051
	LAD	gr1,	L0056
	LD	gr2,gr0
	CALL	WRITESTR
	LD	gr1,	$$a%printtemp
	LD	gr1,0,gr1
	LD	gr2,gr0
	CALL	WRITEINT
	LAD	gr1,	47
	LD	gr2,gr0
	CALL	WRITECHAR
	LD	gr1,	$$b%printtemp
	LD	gr1,0,gr1
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
L0052
; writeln ( 'Temporary Result =' , a , '/' , b )
L0047
	RET
; end;
; var
$y2	DC	0
$y1	DC	0
$x2	DC	0
$x1	DC	0
; x1 , x2 , y1 , y2 : integer;
; var
$com	DC	0
; com : char;
$endflag
	DC	0
; endflag : boolean;
L0001
; begin
	LAD	gr1,	L0057
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( '   *** Calculator -- h for help ***' );
	LAD	gr1,	0
	ST	gr1,	$x1
; x1 := 0;
	LAD	gr1,	1
	ST	gr1,	$x2
; x2 := 1;
	LD	gr1,gr0
	ST	gr1,	$endflag
; endflag := false;
L0058
	LD	gr1,	$endflag
	LAD	gr2,1
	SUBA	gr2,gr1
	LD	gr1,gr2
	CPA	gr1,gr0
	JZE	L0059
; while not endflag do
; begin
	LAD	gr1,	L0060
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( ' Please input command :' );
	LAD	gr1,	$com
	CALL	READCHAR
	LAD	gr1,	$y1
	CALL	READINT
	CALL	READLINE
; readln ( com , y1 );
	LAD	gr1,	1
	ST	gr1,	$y2
; y2 := 1;
	LD	gr1,	$com
	PUSH	0,gr1
	LAD	gr1,	99
	POP	gr2
	CPA	gr2,gr1
	JZE	L0063
	LAD	gr1,0
	JUMP	L0064
L0063
	LAD	gr1,1
L0064
	PUSH	0,gr1
	LD	gr1,	$com
	PUSH	0,gr1
	LAD	gr1,	67
	POP	gr2
	CPA	gr2,gr1
	JZE	L0065
	LAD	gr1,0
	JUMP	L0066
L0065
	LAD	gr1,1
L0066
	POP	gr2
	OR	gr1,gr2
	CPA	gr1,gr0
	JZE	L0061
; if ( com = 'c' ) or ( com = 'C' ) then
; begin
	LD	gr1,	$y1
	ST	gr1,	$x1
; x1 := y1;
	LD	gr1,	$y2
	ST	gr1,	$x2
; x2 := y2
; end
	JUMP	L0062
L0061
	LD	gr1,	$com
	PUSH	0,gr1
	LAD	gr1,	43
	POP	gr2
	CPA	gr2,gr1
	JZE	L0069
	LAD	gr1,0
	JUMP	L0070
L0069
	LAD	gr1,1
L0070
	CPA	gr1,gr0
	JZE	L0067
; else if com = '+' then
	LAD	gr1,	$x1
	PUSH	0,gr1
	LAD	gr1,	$x2
	PUSH	0,gr1
	LAD	gr1,	$y1
	PUSH	0,gr1
	LAD	gr1,	$y2
	PUSH	0,gr1
	CALL	$sum
; call sum ( x1 , x2 , y1 , y2 )
	JUMP	L0068
L0067
	LD	gr1,	$com
	PUSH	0,gr1
	LAD	gr1,	45
	POP	gr2
	CPA	gr2,gr1
	JZE	L0073
	LAD	gr1,0
	JUMP	L0074
L0073
	LAD	gr1,1
L0074
	CPA	gr1,gr0
	JZE	L0071
; else if com = '-' then
	LAD	gr1,	$x1
	PUSH	0,gr1
	LAD	gr1,	$x2
	PUSH	0,gr1
	LAD	gr1,	$y1
	PUSH	0,gr1
	LAD	gr1,	$y2
	PUSH	0,gr1
	CALL	$sub
; call sub ( x1 , x2 , y1 , y2 )
	JUMP	L0072
L0071
	LD	gr1,	$com
	PUSH	0,gr1
	LAD	gr1,	42
	POP	gr2
	CPA	gr2,gr1
	JZE	L0077
	LAD	gr1,0
	JUMP	L0078
L0077
	LAD	gr1,1
L0078
	CPA	gr1,gr0
	JZE	L0075
; else if com = '*' then
	LAD	gr1,	$x1
	PUSH	0,gr1
	LAD	gr1,	$x2
	PUSH	0,gr1
	LAD	gr1,	$y1
	PUSH	0,gr1
	LAD	gr1,	$y2
	PUSH	0,gr1
	CALL	$mult
; call mult ( x1 , x2 , y1 , y2 )
	JUMP	L0076
L0075
	LD	gr1,	$com
	PUSH	0,gr1
	LAD	gr1,	47
	POP	gr2
	CPA	gr2,gr1
	JZE	L0081
	LAD	gr1,0
	JUMP	L0082
L0081
	LAD	gr1,1
L0082
	CPA	gr1,gr0
	JZE	L0079
; else if com = '/' then
	LD	gr1,	$y1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JZE	L0085
	LAD	gr1,0
	JUMP	L0086
L0085
	LAD	gr1,1
L0086
	CPA	gr1,gr0
	JZE	L0083
; if y1 = 0 then
	LAD	gr1,	L0087
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( '*** 0-divide error ***' )
; else
	JUMP	L0084
L0083
	LAD	gr1,	$x1
	PUSH	0,gr1
	LAD	gr1,	$x2
	PUSH	0,gr1
	LAD	gr1,	$y1
	PUSH	0,gr1
	LAD	gr1,	$y2
	PUSH	0,gr1
	CALL	$divide
L0084
; call divide ( x1 , x2 , y1 , y2 )
	JUMP	L0080
L0079
	LD	gr1,	$com
	PUSH	0,gr1
	LAD	gr1,	111
	POP	gr2
	CPA	gr2,gr1
	JZE	L0090
	LAD	gr1,0
	JUMP	L0091
L0090
	LAD	gr1,1
L0091
	PUSH	0,gr1
	LD	gr1,	$com
	PUSH	0,gr1
	LAD	gr1,	79
	POP	gr2
	CPA	gr2,gr1
	JZE	L0092
	LAD	gr1,0
	JUMP	L0093
L0092
	LAD	gr1,1
L0093
	POP	gr2
	OR	gr1,gr2
	CPA	gr1,gr0
	JZE	L0088
; else if ( com = 'o' ) or ( com = 'O' ) then
	LAD	gr1,1
	ST	gr1,	$endflag
; endflag := true
	JUMP	L0089
L0088
; else
; begin
	CALL	WRITELINE
; writeln;
	LAD	gr1,	L0094
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( 'Calculator Usage:' );
	LAD	gr1,	L0095
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( '  c number : clear & set it' );
	LAD	gr1,	L0096
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( '  + number : add it' );
	LAD	gr1,	L0097
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( '  - number : subtract it' );
	LAD	gr1,	L0098
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( '  * number : multiply it' );
	LAD	gr1,	L0099
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( '  / number : divide by it' );
	LAD	gr1,	L0100
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
; writeln ( '  o        : off(terminate execution)' );
	CALL	WRITELINE
; writeln
L0089
L0080
L0076
L0072
L0068
L0062
; end;
	LD	gr1,	$endflag
	CPA	gr1,gr0
	JZE	L0101
; if endflag then
	LAD	gr1,	$x1
	PUSH	0,gr1
	LAD	gr1,	$x2
	PUSH	0,gr1
	CALL	$printfinal
; call printfinal ( x1 , x2 )
; else
	JUMP	L0102
L0101
	LAD	gr1,	$x1
	PUSH	0,gr1
	LAD	gr1,	$x2
	PUSH	0,gr1
	CALL	$printtemp
L0102
; call printtemp ( x1 , x2 )
	JUMP	L0058
L0059
; end
	RET
L0034	DC	0
L0039	DC	'Final Result ='
L0044	DC	'Final Result ='
L0045	DC	'Final Result ='
L0050	DC	'Temporary Result ='
L0055	DC	'Temporary Result ='
L0056	DC	'Temporary Result ='
L0057	DC	'   *** Calculator -- h for help ***'
L0060	DC	' Please input command :'
L0087	DC	'*** 0-divide error ***'
L0094	DC	'Calculator Usage:'
L0095	DC	'  c number : clear & set it'
L0096	DC	'  + number : add it'
L0097	DC	'  - number : subtract it'
L0098	DC	'  * number : multiply it'
L0099	DC	'  / number : divide by it'
L0100	DC	'  o        : off(terminate execution)'
; ------------------------
; Utility functions
; ------------------------
EOVF	CALL	WRITELINE
	LAD	gr1,EOVF1
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
	SVC	1	;  overflow error stop
EOVF1	DC	'***** Run-Time Error : Overflow *****'
E0DIV	JNZ	EOVF
	CALL	WRITELINE
	LAD	gr1,E0DIV1
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
	SVC	2 	;  0-divide error stop
E0DIV1	DC	'***** Run-Time Error : Zero-Divide *****'
EROV	CALL	WRITELINE
	LAD	gr1,EROV1
	LD	gr2,gr0
	CALL	WRITESTR
	CALL	WRITELINE
	SVC	3	;  range-over error stop
EROV1	DC	'***** Run-Time Error : Range-Over in Array Index *****'
; gr1の値（文字）をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITECHAR
	RPUSH
	LD	gr6,SPACE
	LD	gr7,	OBUFSIZE
WC1	SUBA	gr2,ONE		; while(--c > 0) {
	JZE	WC2
	JMI	WC2
	ST	gr6,OBUF,gr7	;  *p++ = ' ';
	CALL	BOVFCHECK
	JUMP	WC1 		; }
WC2	ST	gr1,OBUF,gr7	; *p++ = gr1;
	CALL	BOVFCHECK
	ST	gr7, OBUFSIZE
	RPOP
	RET
; gr1が指す文字列をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITESTR
	RPUSH
	LD	gr6,gr1		; p = gr1;
WS1	LD	gr4,0,gr6	; while(*p != 0) {
	JZE	WS2
	ADDA	gr6,ONE		;  p++;
	SUBA	gr2,ONE		;  c--;
	JUMP	WS1		; }
WS2	LD	gr7,OBUFSIZE	; q = OBUFSIZE;
	LD	gr5,SPACE
WS3	SUBA	gr2,ONE		; while(--c >= 0) {
	JMI	WS4
	ST	gr5,OBUF,gr7	;  *q++ = ' ';
	CALL	BOVFCHECK
	JUMP	WS3		; }
WS4	LD	gr4,0,gr1	; while(*gr1 != 0) {
	JZE	WS5
	ST	gr4,OBUF,gr7	;  *q++ = *gr1++;
	ADDA	gr1,ONE
	CALL	BOVFCHECK
	JUMP	WS4		; }
WS5	ST	gr7,OBUFSIZE	; OBUFSIZE = q;
	RPOP
	RET
BOVFCHECK
	ADDA	gr7,ONE
	CPA	gr7, BOVFLEVEL
	JMI	BOVF1
	CALL	WRITELINE
	LD	gr7,OBUFSIZE
BOVF1	RET
BOVFLEVEL
	DC	256
; gr1の値（整数）をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITEINT
	RPUSH
	LD	gr7,gr0  	; flag = 0;
	CPA	gr1,gr0 	; if(gr1>=0) goto WI1;
	JPL	WI1
	JZE	WI1
	LD	gr4,gr0  	; gr1= - gr1;
	SUBA	gr4,gr1
	CPA	gr4,gr1
	JZE	WI6
	LD	gr1,gr4
	LD	gr7,ONE  	; flag = 1;
WI1	LD	gr6,SIX  	; p = INTBUF+6;
	ST	gr0,INTBUF,gr6	; *p = 0;
	SUBA	gr6,ONE  	; p--;
	CPA	gr1,gr0  	; if(gr1 == 0)
	JNZ	WI2
	LD	gr4,ZERO 	;  *p = '0';
	ST	gr4,INTBUF,gr6
	JUMP	WI5 		; }
				; else {
WI2	CPA	gr1,gr0 	;  while(gr1 != 0) {
	JZE	WI3
	LD	gr5,gr1 	;   gr5 = gr1 - (gr1 / 10) * 10;
	DIVA	gr1,TEN 	;   gr1 /= 10;
	LD	gr4,gr1
	MULA	gr4,TEN
	SUBA	gr5,gr4
	ADDA	gr5,ZERO 	;   gr5 += '0';
	ST	gr5,INTBUF,gr6 	;   *p = gr5;
	SUBA	gr6,ONE 	;   p--;
	JUMP	WI2 		;  }
WI3	CPA	gr7,gr0 	;  if(flag != 0) {
	JZE	WI4
	LD	gr4,MINUS 	;   *p = '-';
	ST	gr4,INTBUF,gr6
	JUMP	WI5 		;  }
WI4	ADDA	gr6,ONE 	;  else p++;
				; }
WI5	LAD	gr1,INTBUF,gr6 	; gr1 = p;
	CALL	WRITESTR 	; WRITESTR();
	RPOP
	RET
WI6	LAD	gr1,MMINT
	CALL	WRITESTR 	; WRITESTR();
	RPOP
	RET
MMINT	DC	'-32768'
; gr1の値（真理値）が0なら'FALSE'を
; 0以外なら'TRUE'をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITEBOOL
	RPUSH
	CPA	gr1,gr0 	; if(gr1 != 0)
	JZE	WB1
	LAD	gr1,WBTRUE 	;  gr1 = TRUE;
	JUMP	WB2
				; else
WB1	LAD	gr1,WBFALSE 	;  gr1 = FALSE;
WB2	CALL	WRITESTR 	; WRITESTR();
	RPOP
	RET
WBTRUE	DC	'TRUE'
WBFALSE	DC	'FALSE'
; 改行を出力する
WRITELINE
	RPUSH
	LD	gr7,OBUFSIZE
	LD	gr6,NEWLINE
	ST	gr6,OBUF,gr7
	ADDA	gr7,ONE
	ST	gr7,OBUFSIZE
	OUT	OBUF,OBUFSIZE
	ST	gr0,OBUFSIZE
	RPOP
	RET
FLUSH	RPUSH
	LD	gr7,OBUFSIZE
	JZE	FL1
	CALL	WRITELINE
FL1	RPOP
	RET
; gr1が指す番地に文字一つを読み込む
READCHAR
	RPUSH
	LD	gr5,RPBBUF 	; if(RPBBUF != 0) {
	JZE	RC0
	ST	gr5,0,gr1 	;  *gr1 = RPBBUF;
	ST	gr0,RPBBUF 	;  RPBBUF = 0
	JUMP	RC3 		;  return; }
RC0	LD	gr7,INP 	; inp = INP;
	LD	gr6,IBUFSIZE 	; if(IBUFSIZE == 0) {
	JNZ	RC1
	IN	IBUF,IBUFSIZE 	;  IN();
	LD	gr7,gr0 	;  inp = 0;
				; }
RC1	CPA	gr7,IBUFSIZE 	; if(inp == IBUFSIZE) {
	JNZ	RC2
	LD	gr5,NEWLINE 	;  *gr1 = '\n';
	ST	gr5,0,gr1
	ST	gr0,IBUFSIZE 	;  IBUFSIZE = INP = 0;
	ST	gr0,INP
	JUMP	RC3 		; }
				; else {
RC2	LD	gr5,IBUF,gr7 	;  *gr1 = *inp++;
	ADDA	gr7,ONE
	ST	gr5,0,gr1
	ST	gr7,INP 	;  INP = inp;
				; }
RC3	RPOP
	RET
; gr1が指す番地に整数値一つを読み込む
READINT	RPUSH
				; do {
RI1	CALL	READCHAR 	;  ch = READCHAR();
	LD	gr7,0,gr1
	CPA	gr7,SPACE 	; } while(ch==' ' || ch=='\t' || ch=='\n');
	JZE	RI1
	CPA	gr7,TAB
	JZE	RI1
	CPA	gr7,NEWLINE
	JZE	RI1
	LD 	gr5,ONE 	; flag = 1
	CPA	gr7,MINUS 	; if(ch == '-') {
	JNZ	RI4
	LD	gr5,gr0 	;  flag = 0;
	CALL	READCHAR 	;  ch = READCHAR();
	LD	gr7,0,gr1	; }
RI4	LD	gr6,gr0 	; v = 0;
RI2	CPA	gr7,ZERO 	; while('0' <= ch && ch <= '9') {
	JMI	RI3
	CPA	gr7,NINE
	JPL	RI3
	MULA	gr6,TEN 	;  v = v*10+ch-'0';
	ADDA	gr6,gr7
	SUBA	gr6,ZERO
	CALL	READCHAR 	;  ch = READSCHAR();
	LD	gr7,0,gr1
	JUMP	RI2 		; }
RI3	ST	gr7,RPBBUF 	; ReadPushBack();
	ST	gr6,0,gr1 	; *gr1 = v;
	CPA	gr5,gr0 	; if(flag == 0) {
	JNZ	RI5
	SUBA	gr5,gr6 	;  *gr1 = -v;
	ST	gr5,0,gr1
				; }
RI5	RPOP
	RET
; 入力を改行コードまで（改行コードも含む）読み飛ばす
READLINE
	ST	gr0,IBUFSIZE
	ST	gr0,INP
	ST	gr0,RPBBUF
	RET
ONE	DC 	1
SIX	DC 	6
TEN	DC 	10
SPACE	DC 	#0020 	; ' '
MINUS	DC 	#002D 	; '-'
TAB	DC	#0009 	; '\t'
ZERO	DC	#0030 	; '0'
NINE	DC	#0039 	; '9'
NEWLINE	DC 	#000A 	; '\n'
INTBUF	DS 	8
OBUFSIZE
	DC	0
IBUFSIZE
	DC	0
INP	DC	0
OBUF	DS	257
IBUF	DS	257
RPBBUF	DC	0
	END
